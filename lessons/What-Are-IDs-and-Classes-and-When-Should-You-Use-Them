<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTML IDs and Classes</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: #f5f5f5;
            color: #333;
            overflow: hidden;
        }

        .presentation {
            width: 100vw;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .slide-container {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 40px;
        }

        .slide {
            display: none;
            width: 100%;
            max-width: 1200px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(136, 21, 24, 0.1);
            padding: 60px;
            height: calc(100vh - 160px);
            overflow-y: auto;
        }

        .slide.active {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            align-items: start;
        }

        .concept {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .concept h2 {
            color: #881518;
            font-size: 2rem;
            margin-bottom: 10px;
            border-bottom: 3px solid #881518;
            padding-bottom: 10px;
        }

        .concept p {
            font-size: 1.1rem;
            line-height: 1.8;
            color: #555;
        }

        .concept ul {
            list-style: none;
            padding-left: 0;
        }

        .concept li {
            font-size: 1.1rem;
            line-height: 1.8;
            color: #555;
            padding-left: 25px;
            position: relative;
            margin-bottom: 10px;
        }

        .concept li::before {
            content: "▸";
            color: #881518;
            position: absolute;
            left: 0;
            font-weight: bold;
        }

        .code-section {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .code-block {
            background: #1e1e1e;
            border-radius: 8px;
            padding: 20px;
            overflow-x: auto;
        }

        .code-block pre {
            margin: 0;
            font-family: 'Courier New', Courier, monospace;
            font-size: 0.95rem;
            line-height: 1.6;
            color: #d4d4d4;
        }

        .code-label {
            font-size: 0.85rem;
            color: #888;
            margin-bottom: 8px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .tag {
            color: #569cd6;
        }

        .attr {
            color: #9cdcfe;
        }

        .value {
            color: #ce9178;
        }

        .selector {
            color: #d7ba7d;
        }

        .property {
            color: #9cdcfe;
        }

        .comment {
            color: #6a9955;
        }

        .good {
            color: #4ec9b0;
        }

        .bad {
            color: #f48771;
            text-decoration: line-through;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 40px;
            background: white;
            border-top: 1px solid #e0e0e0;
        }

        .nav-buttons {
            display: flex;
            gap: 15px;
        }

        button {
            background: #881518;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #6b1013;
        }

        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .slide-counter {
            color: #881518;
            font-weight: 600;
            font-size: 1.1rem;
        }

        @media (max-width: 968px) {
            .slide.active {
                grid-template-columns: 1fr;
                gap: 30px;
            }

            .slide {
                padding: 40px;
            }

            .concept h2 {
                font-size: 1.6rem;
            }

            .concept p, .concept li {
                font-size: 1rem;
            }

            .code-block pre {
                font-size: 0.85rem;
            }

            .slide-container {
                padding: 20px;
            }

            .controls {
                padding: 15px 20px;
            }

            button {
                padding: 10px 18px;
                font-size: 0.9rem;
            }
        }

        @media (max-width: 480px) {
            .slide {
                padding: 30px 20px;
            }

            .concept h2 {
                font-size: 1.4rem;
            }

            button {
                padding: 8px 14px;
                font-size: 0.85rem;
            }

            .nav-buttons {
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="presentation">
        <div class="slide-container">
            <!-- Slide 1 -->
            <div class="slide active">
                <div class="concept">
                    <h2>The id Attribute</h2>
                    <p>The <code>id</code> attribute adds a unique identifier to an HTML element. This identifier can be used to target specific elements in CSS or JavaScript.</p>
                    <p>Each <code>id</code> value must be unique within the HTML document and should only be used once.</p>
                </div>
                <div class="code-section">
                    <div>
                        <div class="code-label">HTML Example</div>
                        <div class="code-block">
                            <pre><span class="tag">&lt;h1</span> <span class="attr">id</span>=<span class="value">"title"</span><span class="tag">&gt;</span>Movie Review Page<span class="tag">&lt;/h1&gt;</span>

<span class="tag">&lt;h2</span> <span class="attr">id</span>=<span class="value">"subtitle"</span><span class="tag">&gt;</span>Latest Reviews<span class="tag">&lt;/h2&gt;</span></pre>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Slide 2 -->
            <div class="slide">
                <div class="concept">
                    <h2>Referencing IDs in CSS</h2>
                    <p>You can reference an <code>id</code> in CSS using the hash symbol (#) followed by the id name.</p>
                    <p>This allows you to apply specific styles to the element with that unique identifier.</p>
                </div>
                <div class="code-section">
                    <div>
                        <div class="code-label">CSS Example</div>
                        <div class="code-block">
                            <pre><span class="selector">#title</span> {
  <span class="property">color</span>: red;
}

<span class="selector">#subtitle</span> {
  <span class="property">color</span>: blue;
  <span class="property">font-size</span>: 1.5rem;
}</pre>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Slide 3 -->
            <div class="slide">
                <div class="concept">
                    <h2>ID Naming Rules</h2>
                    <p>ID values must follow specific rules:</p>
                    <ul>
                        <li>Must be unique (used only once per page)</li>
                        <li>Cannot contain spaces</li>
                        <li>Can only contain letters, digits, underscores, and dashes</li>
                    </ul>
                    <p>Browsers will interpret spaces as part of the ID name, leading to styling and scripting issues.</p>
                </div>
                <div class="code-section">
                    <div>
                        <div class="code-label">Valid Examples</div>
                        <div class="code-block">
                            <pre><span class="tag">&lt;h1</span> <span class="attr">id</span>=<span class="value">"<span class="good">heading</span>"</span><span class="tag">&gt;</span>
<span class="tag">&lt;h1</span> <span class="attr">id</span>=<span class="value">"<span class="good">main-heading</span>"</span><span class="tag">&gt;</span>
<span class="tag">&lt;h1</span> <span class="attr">id</span>=<span class="value">"<span class="good">main_heading</span>"</span><span class="tag">&gt;</span></pre>
                        </div>
                    </div>
                    <div>
                        <div class="code-label">Invalid Example</div>
                        <div class="code-block">
                            <pre><span class="tag">&lt;h1</span> <span class="attr">id</span>=<span class="value">"<span class="bad">main heading</span>"</span><span class="tag">&gt;</span>
<span class="comment">/* Spaces are not allowed */</span></pre>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Slide 4 -->
            <div class="slide">
                <div class="concept">
                    <h2>The class Attribute</h2>
                    <p>Unlike the <code>id</code> attribute, the <code>class</code> attribute does not need to be unique and can be applied to multiple elements.</p>
                    <p>Class values can contain spaces, which allows you to apply multiple classes to a single element.</p>
                </div>
                <div class="code-section">
                    <div>
                        <div class="code-label">Single Class Example</div>
                        <div class="code-block">
                            <pre><span class="tag">&lt;div</span> <span class="attr">class</span>=<span class="value">"box"</span><span class="tag">&gt;&lt;/div&gt;</span></pre>
                        </div>
                    </div>
                    <div>
                        <div class="code-label">CSS for Class</div>
                        <div class="code-block">
                            <pre><span class="selector">.box</span> {
  <span class="property">width</span>: 100px;
  <span class="property">height</span>: 100px;
}</pre>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Slide 5 -->
            <div class="slide">
                <div class="concept">
                    <h2>Multiple Classes</h2>
                    <p>You can apply multiple classes to an element by separating the class names with spaces.</p>
                    <p>This allows you to combine different style rules and apply them to the same element.</p>
                </div>
                <div class="code-section">
                    <div>
                        <div class="code-label">Multiple Classes Example</div>
                        <div class="code-block">
                            <pre><span class="tag">&lt;div</span> <span class="attr">class</span>=<span class="value">"box red-box"</span><span class="tag">&gt;&lt;/div&gt;</span>
<span class="tag">&lt;div</span> <span class="attr">class</span>=<span class="value">"box blue-box"</span><span class="tag">&gt;&lt;/div&gt;</span>
<span class="tag">&lt;div</span> <span class="attr">class</span>=<span class="value">"box red-box"</span><span class="tag">&gt;&lt;/div&gt;</span>
<span class="tag">&lt;div</span> <span class="attr">class</span>=<span class="value">"box blue-box"</span><span class="tag">&gt;&lt;/div&gt;</span></pre>
                        </div>
                    </div>
                    <div>
                        <div class="code-label">CSS for Multiple Classes</div>
                        <div class="code-block">
                            <pre><span class="selector">.box</span> {
  <span class="property">width</span>: 100px;
  <span class="property">height</span>: 100px;
}

<span class="selector">.red-box</span> {
  <span class="property">background-color</span>: red;
}

<span class="selector">.blue-box</span> {
  <span class="property">background-color</span>: blue;
}</pre>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Slide 6 -->
            <div class="slide">
                <div class="concept">
                    <h2>When to Use ID vs Class</h2>
                    <p><strong>Use classes</strong> when you want to apply a set of styles to many elements. Classes are ideal for reusable styling patterns.</p>
                    <p><strong>Use IDs</strong> when you want to target a specific element. IDs are best for unique identifiers that should only appear once on a page.</p>
                    <p>Remember: IDs must be unique, while classes can be reused across multiple elements.</p>
                </div>
                <div class="code-section">
                    <div>
                        <div class="code-label">Best Practice Example</div>
                        <div class="code-block">
                            <pre><span class="comment">&lt;!-- Use ID for unique element --&gt;</span>
<span class="tag">&lt;header</span> <span class="attr">id</span>=<span class="value">"main-header"</span><span class="tag">&gt;</span>
  <span class="tag">&lt;h1&gt;</span>My Website<span class="tag">&lt;/h1&gt;</span>
<span class="tag">&lt;/header&gt;</span>

<span class="comment">&lt;!-- Use class for multiple elements --&gt;</span>
<span class="tag">&lt;button</span> <span class="attr">class</span>=<span class="value">"btn"</span><span class="tag">&gt;</span>Submit<span class="tag">&lt;/button&gt;</span>
<span class="tag">&lt;button</span> <span class="attr">class</span>=<span class="value">"btn"</span><span class="tag">&gt;</span>Cancel<span class="tag">&lt;/button&gt;</span>
<span class="tag">&lt;button</span> <span class="attr">class</span>=<span class="value">"btn"</span><span class="tag">&gt;</span>Reset<span class="tag">&lt;/button&gt;</span></pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="controls">
            <div class="nav-buttons">
                <button id="prevBtn">← Previous</button>
                <button id="nextBtn">Next →</button>
            </div>
            <div class="slide-counter">
                <span id="currentSlide">1</span> / <span id="totalSlides">6</span>
            </div>
        </div>
    </div>

    <script>
        let currentSlide = 0;
        const slides = document.querySelectorAll('.slide');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const currentSlideSpan = document.getElementById('currentSlide');
        const totalSlidesSpan = document.getElementById('totalSlides');

        totalSlidesSpan.textContent = slides.length;

        function showSlide(n) {
            slides[currentSlide].classList.remove('active');
            currentSlide = (n + slides.length) % slides.length;
            slides[currentSlide].classList.add('active');
            currentSlideSpan.textContent = currentSlide + 1;
            
            prevBtn.disabled = currentSlide === 0;
            nextBtn.disabled = currentSlide === slides.length - 1;
        }

        function nextSlide() {
            if (currentSlide < slides.length - 1) {
                showSlide(currentSlide + 1);
            }
        }

        function prevSlide() {
            if (currentSlide > 0) {
                showSlide(currentSlide - 1);
            }
        }

        prevBtn.addEventListener('click', prevSlide);
        nextBtn.addEventListener('click', nextSlide);

        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowRight') {
                nextSlide();
            } else if (e.key === 'ArrowLeft') {
                prevSlide();
            }
        });

        showSlide(0);
    </script>
</body>
</html>